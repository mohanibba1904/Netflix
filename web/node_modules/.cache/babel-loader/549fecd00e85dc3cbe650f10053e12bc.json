{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nagababu\\\\Documents\\\\GitHub\\\\Netflix\\\\web\\\\src\\\\components\\\\Login\\\\index.js\";\nimport { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport Context from '../../Context/Context';\nimport { LoginContainer, LoginForm, LoginFormLogo, LoginFormLabel, CheckboxLabel, LoginFormInput, LoginFormCheckboxInput, CheckboxContainer, FormSubmitButton, ErrorTextPara } from './styledComponents';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: '',\n      password: '',\n      errorMessage: '',\n      displayErrorMsg: false,\n      displayPassword: false\n    };\n\n    this.getUsername = event => {\n      this.setState({\n        username: event.target.value\n      });\n    };\n\n    this.getPassword = event => {\n      this.setState({\n        password: event.target.value\n      });\n    };\n\n    this.onSuccessfulLogin = jwtToken => {\n      const {\n        history\n      } = this.props;\n      Cookies.set('jwt_token', jwtToken, {\n        expires: 30,\n        path: '/'\n      });\n      history.replace('/');\n    };\n\n    this.onLoginFailure = errorMessage => {\n      this.setState({\n        displayErrorMsg: true,\n        errorMessage\n      });\n    };\n\n    this.attemptLogin = async event => {\n      event.preventDefault();\n      const {\n        username,\n        password\n      } = this.state;\n      const user_name = username;\n      const userDetails = {\n        user_name,\n        password\n      };\n      const loginUrl = 'http://127.0.0.1:8000/login';\n      const loginOptions = {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(userDetails)\n      };\n      const response = await fetch(loginUrl, loginOptions);\n      const responseData = await response.json();\n\n      if (response.ok) {\n        this.onSuccessfulLogin(responseData.access_token);\n      } else {\n        this.onLoginFailure(responseData.error_msg);\n      }\n    };\n\n    this.showPassword = event => {\n      this.setState({\n        displayPassword: event.target.checked\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Context.Consumer, {\n      children: value => {\n        const {\n          isLightThemeActive\n        } = value;\n        const loginFormLogo = isLightThemeActive ? 'https://assets.ccbp.in/frontend/react-js/nxt-watch-logo-light-theme-img.png' : 'https://assets.ccbp.in/frontend/react-js/nxt-watch-logo-dark-theme-img.png';\n        const loginBgColor = isLightThemeActive ? '#f9f9f9' : '#181818';\n        const loginFormBgColor = isLightThemeActive ? '#f9f9f9' : '#0f0f0f';\n        const loginFormLabelColor = isLightThemeActive ? '#181818' : '#f9f9f9';\n        const {\n          errorMessage,\n          displayErrorMsg,\n          displayPassword\n        } = this.state;\n        const token = Cookies.get('jwt_token');\n\n        if (token !== undefined) {\n          return /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 20\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(LoginContainer, {\n          backgroundColor: loginBgColor,\n          children: /*#__PURE__*/_jsxDEV(LoginForm, {\n            backgroundColor: loginFormBgColor,\n            onSubmit: this.attemptLogin,\n            children: [/*#__PURE__*/_jsxDEV(LoginFormLogo, {\n              src: loginFormLogo,\n              alt: \"website logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(LoginFormLabel, {\n              color: loginFormLabelColor,\n              htmlFor: \"username\",\n              children: \"USERNAME\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(LoginFormInput, {\n              id: \"username\",\n              placeholder: \"Username\",\n              type: \"text\",\n              onChange: this.getUsername\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(LoginFormLabel, {\n              color: loginFormLabelColor,\n              htmlFor: \"password\",\n              children: \"PASSWORD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(LoginFormInput, {\n              id: \"password\",\n              placeholder: \"Password\",\n              type: displayPassword ? 'text' : 'password',\n              onChange: this.getPassword\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CheckboxContainer, {\n              children: [/*#__PURE__*/_jsxDEV(LoginFormCheckboxInput, {\n                id: \"showPassword\",\n                type: \"checkbox\",\n                onChange: this.showPassword\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(CheckboxLabel, {\n                color: loginFormLabelColor,\n                htmlFor: \"showPassword\",\n                children: \"Show Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FormSubmitButton, {\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this), displayErrorMsg && /*#__PURE__*/_jsxDEV(ErrorTextPara, {\n              children: [\"*\", errorMessage]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/Nagababu/Documents/GitHub/Netflix/web/src/components/Login/index.js"],"names":["Component","Redirect","Cookies","Context","LoginContainer","LoginForm","LoginFormLogo","LoginFormLabel","CheckboxLabel","LoginFormInput","LoginFormCheckboxInput","CheckboxContainer","FormSubmitButton","ErrorTextPara","Login","state","username","password","errorMessage","displayErrorMsg","displayPassword","getUsername","event","setState","target","value","getPassword","onSuccessfulLogin","jwtToken","history","props","set","expires","path","replace","onLoginFailure","attemptLogin","preventDefault","user_name","userDetails","loginUrl","loginOptions","method","headers","body","JSON","stringify","response","fetch","responseData","json","ok","access_token","error_msg","showPassword","checked","render","isLightThemeActive","loginFormLogo","loginBgColor","loginFormBgColor","loginFormLabelColor","token","get","undefined"],"mappings":"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","sourcesContent":["import {Component} from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport Cookies from 'js-cookie'\r\n\r\nimport Context from '../../Context/Context'\r\nimport {\r\n  LoginContainer,\r\n  LoginForm,\r\n  LoginFormLogo,\r\n  LoginFormLabel,\r\n  CheckboxLabel,\r\n  LoginFormInput,\r\n  LoginFormCheckboxInput,\r\n  CheckboxContainer,\r\n  FormSubmitButton,\r\n  ErrorTextPara,\r\n} from './styledComponents'\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    username: '',\r\n    password: '',\r\n    errorMessage: '',\r\n    displayErrorMsg: false,\r\n    displayPassword: false,\r\n  }\r\n\r\n  getUsername = event => {\r\n    this.setState({\r\n      username: event.target.value,\r\n    })\r\n  }\r\n\r\n  getPassword = event => {\r\n    this.setState({\r\n      password: event.target.value,\r\n    })\r\n  }\r\n\r\n  onSuccessfulLogin = jwtToken => {\r\n    const {history} = this.props\r\n    Cookies.set('jwt_token', jwtToken, {\r\n      expires: 30,\r\n      path: '/',\r\n    })\r\n    history.replace('/')\r\n  }\r\n\r\n  onLoginFailure = errorMessage => {\r\n    this.setState({displayErrorMsg: true, errorMessage})\r\n  }\r\n\r\n  attemptLogin = async event => {\r\n    event.preventDefault()\r\n    const {username, password} = this.state\r\n    const user_name =username\r\n    const userDetails = {user_name, password}\r\n    const loginUrl = 'http://127.0.0.1:8000/login'\r\n    const loginOptions = {\r\n      method: 'POST',\r\n      headers: {\"Content-Type\": \"application/json\"},\r\n      body: JSON.stringify(userDetails),\r\n    }\r\n    const response = await fetch(loginUrl, loginOptions)\r\n    const responseData = await response.json()\r\n    if (response.ok) {\r\n      this.onSuccessfulLogin(responseData.access_token)\r\n      \r\n    } else {\r\n      this.onLoginFailure(responseData.error_msg)\r\n    }\r\n  }\r\n\r\n  showPassword = event => {\r\n    this.setState({displayPassword: event.target.checked})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Context.Consumer>\r\n        {value => {\r\n          const {isLightThemeActive} = value\r\n          const loginFormLogo = isLightThemeActive\r\n            ? 'https://assets.ccbp.in/frontend/react-js/nxt-watch-logo-light-theme-img.png'\r\n            : 'https://assets.ccbp.in/frontend/react-js/nxt-watch-logo-dark-theme-img.png'\r\n          const loginBgColor = isLightThemeActive ? '#f9f9f9' : '#181818'\r\n          const loginFormBgColor = isLightThemeActive ? '#f9f9f9' : '#0f0f0f'\r\n          const loginFormLabelColor = isLightThemeActive ? '#181818' : '#f9f9f9'\r\n          const {errorMessage, displayErrorMsg, displayPassword} = this.state\r\n          const token = Cookies.get('jwt_token')\r\n          if (token !== undefined) {\r\n            return <Redirect to=\"/\" />\r\n          }\r\n          return (\r\n            <LoginContainer backgroundColor={loginBgColor}>\r\n              <LoginForm\r\n                backgroundColor={loginFormBgColor}\r\n                onSubmit={this.attemptLogin}\r\n              >\r\n                <LoginFormLogo src={loginFormLogo} alt=\"website logo\" />\r\n                <LoginFormLabel color={loginFormLabelColor} htmlFor=\"username\">\r\n                  USERNAME\r\n                </LoginFormLabel>\r\n                <LoginFormInput\r\n                  id=\"username\"\r\n                  placeholder=\"Username\"\r\n                  type=\"text\"\r\n                  onChange={this.getUsername}\r\n                />\r\n                <LoginFormLabel color={loginFormLabelColor} htmlFor=\"password\">\r\n                  PASSWORD\r\n                </LoginFormLabel>\r\n                <LoginFormInput\r\n                  id=\"password\"\r\n                  placeholder=\"Password\"\r\n                  type={displayPassword ? 'text' : 'password'}\r\n                  onChange={this.getPassword}\r\n                />\r\n                <CheckboxContainer>\r\n                  <LoginFormCheckboxInput\r\n                    id=\"showPassword\"\r\n                    type=\"checkbox\"\r\n                    onChange={this.showPassword}\r\n                  />\r\n                  <CheckboxLabel\r\n                    color={loginFormLabelColor}\r\n                    htmlFor=\"showPassword\"\r\n                  >\r\n                    Show Password\r\n                  </CheckboxLabel>\r\n                </CheckboxContainer>\r\n                <FormSubmitButton>Login</FormSubmitButton>\r\n                {displayErrorMsg && (\r\n                  <ErrorTextPara>*{errorMessage}</ErrorTextPara>\r\n                )}\r\n              </LoginForm>\r\n            </LoginContainer>\r\n          )\r\n        }}\r\n      </Context.Consumer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Login\r\n"]},"metadata":{},"sourceType":"module"}